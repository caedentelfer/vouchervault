/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidInstruction: 'Invalid Instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInstructionError extends Error {
  readonly code: number = 0x0
  readonly name: string = 'InvalidInstruction'
  constructor() {
    super('Invalid Instruction')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInstructionError)
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new InvalidInstructionError())
createErrorFromNameLookup.set(
  'InvalidInstruction',
  () => new InvalidInstructionError()
)

/**
 * InvalidMintAuthority: 'Invalid Mint Authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
  readonly code: number = 0x1
  readonly name: string = 'InvalidMintAuthority'
  constructor() {
    super('Invalid Mint Authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new InvalidMintAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMintAuthority',
  () => new InvalidMintAuthorityError()
)

/**
 * InvalidRecipientAccount: 'Invalid Recipient Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRecipientAccountError extends Error {
  readonly code: number = 0x2
  readonly name: string = 'InvalidRecipientAccount'
  constructor() {
    super('Invalid Recipient Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRecipientAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new InvalidRecipientAccountError())
createErrorFromNameLookup.set(
  'InvalidRecipientAccount',
  () => new InvalidRecipientAccountError()
)

/**
 * InsufficientFunds: 'Insufficient Funds'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientFundsError extends Error {
  readonly code: number = 0x3
  readonly name: string = 'InsufficientFunds'
  constructor() {
    super('Insufficient Funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new InsufficientFundsError())
createErrorFromNameLookup.set(
  'InsufficientFunds',
  () => new InsufficientFundsError()
)

/**
 * InvalidVoucherEscrowAccount: 'Invalid Voucher Escrow Account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoucherEscrowAccountError extends Error {
  readonly code: number = 0x4
  readonly name: string = 'InvalidVoucherEscrowAccount'
  constructor() {
    super('Invalid Voucher Escrow Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoucherEscrowAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new InvalidVoucherEscrowAccountError())
createErrorFromNameLookup.set(
  'InvalidVoucherEscrowAccount',
  () => new InvalidVoucherEscrowAccountError()
)

/**
 * VoucherExpired: 'Voucher Expired'
 *
 * @category Errors
 * @category generated
 */
export class VoucherExpiredError extends Error {
  readonly code: number = 0x5
  readonly name: string = 'VoucherExpired'
  constructor() {
    super('Voucher Expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoucherExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x5, () => new VoucherExpiredError())
createErrorFromNameLookup.set('VoucherExpired', () => new VoucherExpiredError())

/**
 * InvalidIssuer: 'Invalid Issuer'
 *
 * @category Errors
 * @category generated
 */
export class InvalidIssuerError extends Error {
  readonly code: number = 0x6
  readonly name: string = 'InvalidIssuer'
  constructor() {
    super('Invalid Issuer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidIssuerError)
    }
  }
}

createErrorFromCodeLookup.set(0x6, () => new InvalidIssuerError())
createErrorFromNameLookup.set('InvalidIssuer', () => new InvalidIssuerError())

/**
 * VoucherNotExpired: 'Voucher Not Expired'
 *
 * @category Errors
 * @category generated
 */
export class VoucherNotExpiredError extends Error {
  readonly code: number = 0x7
  readonly name: string = 'VoucherNotExpired'
  constructor() {
    super('Voucher Not Expired')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoucherNotExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(0x7, () => new VoucherNotExpiredError())
createErrorFromNameLookup.set(
  'VoucherNotExpired',
  () => new VoucherNotExpiredError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
