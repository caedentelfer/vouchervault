/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ReleaseEscrowAndBurnVoucher
 * @category generated
 */
export const ReleaseEscrowAndBurnVoucherStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>(
  [['instructionDiscriminator', beet.u8]],
  'ReleaseEscrowAndBurnVoucherInstructionArgs'
)
/**
 * Accounts required by the _ReleaseEscrowAndBurnVoucher_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] ata
 * @property [_writable_] mintAccount
 * @property [] mintAuthority
 * @property [_writable_] escrowAccount
 * @property [] clockProgram
 * @category Instructions
 * @category ReleaseEscrowAndBurnVoucher
 * @category generated
 */
export type ReleaseEscrowAndBurnVoucherInstructionAccounts = {
  payer: web3.PublicKey
  ata: web3.PublicKey
  mintAccount: web3.PublicKey
  mintAuthority: web3.PublicKey
  escrowAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clockProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const releaseEscrowAndBurnVoucherInstructionDiscriminator = 2

/**
 * Creates a _ReleaseEscrowAndBurnVoucher_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ReleaseEscrowAndBurnVoucher
 * @category generated
 */
export function createReleaseEscrowAndBurnVoucherInstruction(
  accounts: ReleaseEscrowAndBurnVoucherInstructionAccounts,
  programId = new web3.PublicKey('gidsaNxwQbr6pyLDaqVn4pPwAypkjwFNZQvvKBJ1Rbi')
) {
  const [data] = ReleaseEscrowAndBurnVoucherStruct.serialize({
    instructionDiscriminator:
      releaseEscrowAndBurnVoucherInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clockProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
