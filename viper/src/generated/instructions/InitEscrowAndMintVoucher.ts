/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { InitEscrowArgs, initEscrowArgsBeet } from '../types/InitEscrowArgs'
import { MintVoucherArgs, mintVoucherArgsBeet } from '../types/MintVoucherArgs'

/**
 * @category Instructions
 * @category InitEscrowAndMintVoucher
 * @category generated
 */
export type InitEscrowAndMintVoucherInstructionArgs = {
  arg0: InitEscrowArgs
  arg1: MintVoucherArgs
}
/**
 * @category Instructions
 * @category InitEscrowAndMintVoucher
 * @category generated
 */
export const InitEscrowAndMintVoucherStruct = new beet.FixableBeetArgsStruct<
  InitEscrowAndMintVoucherInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['arg0', initEscrowArgsBeet],
    ['arg1', mintVoucherArgsBeet],
  ],
  'InitEscrowAndMintVoucherInstructionArgs'
)
/**
 * Accounts required by the _InitEscrowAndMintVoucher_ instruction
 *
 * @property [_writable_] escrowAccount
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] mintAccount
 * @property [_writable_] mintAuthority
 * @property [_writable_] associatedTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category InitEscrowAndMintVoucher
 * @category generated
 */
export type InitEscrowAndMintVoucherInstructionAccounts = {
  escrowAccount: web3.PublicKey
  payer: web3.PublicKey
  mintAccount: web3.PublicKey
  mintAuthority: web3.PublicKey
  associatedTokenAccount: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
}

export const initEscrowAndMintVoucherInstructionDiscriminator = 1

/**
 * Creates a _InitEscrowAndMintVoucher_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitEscrowAndMintVoucher
 * @category generated
 */
export function createInitEscrowAndMintVoucherInstruction(
  accounts: InitEscrowAndMintVoucherInstructionAccounts,
  args: InitEscrowAndMintVoucherInstructionArgs,
  programId = new web3.PublicKey('gidsaNxwQbr6pyLDaqVn4pPwAypkjwFNZQvvKBJ1Rbi')
) {
  const [data] = InitEscrowAndMintVoucherStruct.serialize({
    instructionDiscriminator: initEscrowAndMintVoucherInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.escrowAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintAccount,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
